import argparse
import logging
import csv
import os
from typing import  Optional
from pathlib import Path
from Bio import Entrez
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord

"""
Description of connect_to_ncbi.py

This script was built to connect fetches protein information from the NCBI Protein database
for a list of genes specified in a subsetted CSV file generated by search_and_extract.py based on the locus tag.
It yields all gene models associated with each locus tag.
"""

def search_gene_by_locus_tag(locus_tag: str) -> list:
    """
    This function searches for gene records in NCBI Nucleotide database based on a locus tag.

    Args:
        locus_tag (str): Locus tag of the gene to search for.

    Returns:
        list: List of gene IDs that match the search query.
    """
    # Construct the query string to search for the gene with the given locus tag
    query = f"{locus_tag} [GENE]"

    # Use the Entrez module to perform the search
    handle = Entrez.esearch(db="nucleotide", term=query)
    record = Entrez.read(handle)
    handle.close()

    # Return the list of gene IDs that match the search query
    return record["IdList"]


def get_protein_id(gene_id: str) -> Optional[str]:
    """
    This function retrieves the associated protein ID from an NCBI gene record.

    Args:
        gene_id (str): Gene ID from the NCBI Nucleotide database.

    Returns:
        str: Protein ID associated with the gene record, or None if not found.
    """
    # Use the Entrez module to fetch the gene record with the given gene ID
    handle = Entrez.efetch(db="nucleotide", id=gene_id, rettype="gb", retmode="text")
    gene_record = SeqIO.read(handle, "gb")
    handle.close()

    # Iterate over the features of the gene record to find the CDS feature that has the protein ID
    for feature in gene_record.features:
        if feature.type == "CDS":
            protein_id = feature.qualifiers.get("protein_id", [None])[0]
            return protein_id

    # If the protein ID is not found, return None
    return None

def fetch_protein_record(protein_id: str) -> SeqRecord:
    """
    This function fetches protein information from the NCBI Protein database using a protein ID.

    Args:
        protein_id (str): Protein ID from the NCBI Protein database.

    Returns:
        SeqRecord: Protein record in GenBank format.
    """
    handle = Entrez.efetch(db="protein", id=protein_id, rettype="gb", retmode="text")
    protein_record = SeqIO.read(handle, "gb")
    handle.close()
    return protein_record

def write_output_files(locus_tag: str, gene_ids: list, output_dir: str) -> str:
    """
    This functions creates a CSV file for each locus tag with its corresponding gene and protein
    information. It utilizes the above functions to get the the protein ID for each gene ID, retrieve the sequences 
    and write all of that the information to the output files.

    Args:
        locus_tag (str): The locus tag used as the basis for the output file names.
        gene_ids (list): List of gene IDs for which to fetch and write protein information.
        output_dir (str): Path to the output directory where the output files will be saved.

    Returns:
        str: A string representing the output_basename used for creating output file names.
    """
    # Create output file names based on the locus tag
    output_basename = output_dir / locus_tag
    csv_file_name = f"{output_basename}_output.csv"

    # Write output files to the output directory
    with open(csv_file_name, "w", newline="") as csv_file:
        csv_writer = csv.writer(csv_file)
        csv_writer.writerow(["Locus", "Gene ID", "Protein ID", "Protein Description", "Protein Sequence"])

        for gene_id in gene_ids:
            # Retrieve the associated protein ID from the gene record
            protein_id = get_protein_id(gene_id)

            if protein_id:
                # Fetch protein information from NCBI Protein database using the protein ID
                protein_record = fetch_protein_record(protein_id)
                protein_description = protein_record.description
                protein_sequence = str(protein_record.seq)

                # Write the output to a CSV file
                csv_writer.writerow([locus_tag, gene_id, protein_id, protein_description, protein_sequence])
            else:
                # Write an error message to the CSV file if no protein is found for the gene ID
                csv_writer.writerow([locus_tag, gene_id, "", "No protein found", ""])

    return output_basename

def main(email: str, input_csv: str, output_dir: str) -> None:
    """
    This main function reads the CSV files in the input folder, searches for genes based on locus tag,
    retrieves associated protein IDs, and fetches protein information from NCBI.
    The sequence information in the output CSV files are combined into a final peptide fasta file.
    The CSV files are created specifically for debugging if necessary.

    Args:
        email (str): Email address to use for Entrez queries.
        input_csv (str): Path to the input CSV file.
        output_dir (str): Path to output directory where the output files will be saved.

    Returns:
        None.
    """
    # Set email address for Entrez queries
    Entrez.email = email

    # Define the output directory
    output_dir = Path(output_dir).resolve()
    output_dir = output_dir
    output_dir.mkdir(parents=True, exist_ok=True)

    # Open the input CSV file
    with open(input_csv, 'r') as csvfile:
        # Parse the CSV file using the csv module
        csv_reader = csv.DictReader(csvfile)
        locus_tag_column = 'Locus'

        # Iterate over the rows in the CSV file
        for row in csv_reader:
            # Extract the locus tag from the specified column of the current row
            locus_tag = row[locus_tag_column]

            # Search for gene records in NCBI Nucleotide database based on the locus tag
            gene_ids = search_gene_by_locus_tag(locus_tag)

            # Write the output files to the output directory and get output_basename
            write_output_files(locus_tag, gene_ids, output_dir)

            logging.info(f"Output files generated successfully for locus tag: {locus_tag}")

    # Combine all the output files into a single FASTA file
    fasta_records = []
    for filename in os.listdir(output_dir):
        if filename.endswith("_output.csv"):
            with open(output_dir / filename, "r") as csv_file:
                csv_reader = csv.reader(csv_file)
                next(csv_reader) # Skip header row
                for row in csv_reader:
                    locus_tag, gene_id, protein_id, protein_description, protein_sequence = row
                    if "No protein found" not in protein_description:
                        fasta_record = f">{locus_tag}|{protein_id}|{protein_description}\n"
                        sequence_parts = [protein_sequence[i:i+80] for i in range(0, len(protein_sequence), 80)]
                        sequence_formatted = "\n".join(sequence_parts) + "\n"
                        fasta_records.append(fasta_record + sequence_formatted)

    fasta_file = output_dir / "combined_model_species_output.pep.fasta"
    with open(fasta_file, "w") as output_fasta:
        output_fasta.write("\n".join(fasta_records))
        output_fasta.write("\n")

    logging.info("Combined output file generated successfully: combined_model_species_output.pep.fasta")

    # Remove empty directories
    os.rmdir(output_dir)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Fetch protein information from NCBI for a list of genes.')
    parser.add_argument('--email', '-e', type=str, required=True, help='Email address to use for Entrez queries.')
    parser.add_argument('--input-csv', '-i', type=str, required=True, help='Path to input folder containing CSV files.')
    parser.add_argument('--output', '-o', type=str, required=True, help='Path to output directory.')
    args = parser.parse_args()

    # Configure logging
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

    try:
        main(args.email, args.input_csv, args.output)
    except Exception as e:
        logging.exception("An error occurred while executing the script.")


